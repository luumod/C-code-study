结构体动态内存分配
首先声明结构指针     movies=(struct film*) malloc(n*sizeof (struct film))

从数组到链表
/*****************/
存储数据的几个问题：  内存分配  我们该怎么分配一个不确定的空间内存呢?
1.创建一个指针，为指针分配n个内存地址
2.分别为每个结构分配空间，调用malloc n次
**************显然这两种方式都比较麻烦


更好的办法 : 每次使用malloc为新结构分配空间时，也为新指针分配空间，但是还需要另一个指针跟踪新分配的指针，用于跟踪的指针，本身也需要一个
指针来跟踪。
每个结构中包含指向next结构的指针,然后当创建新结构时，把该结构的地址存储在上一个结构中
定义链表的基础 :  创建指向同类型结构的指针

该结构后面没有其他成员: 把next成员指针设置为NULL 
头指针 : 还需要一个单独的指针存储第一个结构的地址,头指针指向链表的第一项

NULl ；表明该结构是链表的最后一个结构

***********新结构的地址存储在上一个结构中，新信息存储在新结构中，新结构的next成员设置为NULL***********
每显示一项，就可以根据该项中已存储的地址来定位下一个待显示的项


链表的工作步骤:
*************************************
1.显示链表 : 设置一个指向第一个结构的指针current，头指针head已经指向链表的第一个结构，因此: current=head
打印结构，根据存储在next成员中的值，重新设置current指针指向链表的下一个结构  current=current->next;
当链表显示最后一项时，current被设置为NULL，因为这是链表的最后一个next成员的值
while (current != NULL) {
		printf("Movies: %s Rating : %d\n", current->title, current->rating);
		current = current->next;	//进入下一个结构体
}

2.创建链表
1). 使用malloc为结构分配足够的空间
2). 存储结构的地址
3). 把当前信息拷贝到结构中
如果用户进行输入，就为其分配一个结构的空间 并将其赋值给指针变量current
current = (struct film*)malloc(sizeof(struct film));
链表中第一个结构的地址存储在指针变量head，其后每一个结构的地址都存储在上一个结构的next成员里
告知程序是否是第一个结构?
    if (head = NULL) {
			//第一个结构体
			head = current;	//是第一个结构，则用head头指针存储下一个结构的信息
		}
		else {
			//下一个结构体
			prev->next = current;	//新结构的地址存储在上一个结构中
		}
把next成员设置为链表的最后一个结构，进行赋值title rating
为下一次输入做准备:  设置prev指向当前的结构，当下一个结构输入时，当前结构要成为新结构的上一个结构
prev=current;   //以便获取prev->next=current


3.释放链表
current = head;
while (current != NULL) {
    head = current->next;
    free(current);
    current = head;
}
为每个结构都释放空间

**********************************************
                 抽象数据类型 ADT

类型包括属性和操作

定义新类型的方法  :  从抽象到具体
1. 提供类型属性和相关操作的抽象描述
2. 开发一个实现ADT的编程接口
3. 编写代码实现接口

建立抽象:
    链表的常用操作 :
    1.初始化一个空链表
    2.在链表末尾添加一个新项
    3.确定链表是否为空
    4.确定链表是否已满
    5.确定链表的项数
    6.访问某一项，执行其他操作,显示等

    ***在链表任意位置插入一个项

    ***移除链表的一个项

    ***在链表中检索另一个链表

    ***用另一个项替换链表的一个项

    ***在链表中搜索一个项
建立接口:
使用typedef创建新类型

创建新类型，描述属性
typedef struct film{
	char title[TSIZE];
	int rating;
}Item;

//创建节点,每个链结叫做节点，每个节点包含形成链表内容的信息和指向下一个节点的指针
typedef struct node {
	Item item;		//链表内容信息
	struct node* next;	//指向下一个节点的指针
}Node;
typedef Node* List;  //指向链表开始处的指针
List movies;	//创建链表所需要的指针movies

//增加一个变量记录项数
typedef struct list {
	Node* head;	//指向链表头的指针
	int size;	//链表的项数
}List;
List movies;	//创建了一个链表,注意此处和上述的List movies不是同一个意思，这是一个链表
表示接口层次不可看见的实现细节

前提条件与后置条件:
void intializelist(List* plist)
操作: 初始化一个链表
前提条件: plist指向一个链表
后置条件: 该链表初始化为空
Intializelist(&movies);     //注意要传地址,通过指向该变量的指针来修改主调程序传入的变量

总结:  定义一个特定的结构作为Item类型，然后根据Item定义了节点Node，再根据Node的定义了List




在头节点后面插入节点
（1）定义一个尾指针pTail，并初始化，使它指向头节点，即pTail=pHead；

（2）在pTail后面添加节点，修改指针： 

       pTail->pNext=p;  

      p->pNext=NULL;

      pTail=p;              //使pTail指向链表最后一个元素
 
 
 向链表中插入元素
 （1）p->pNext=q->pNext;

（2）q->pNext=p;


删除链表的元素
假如要删除节点2，只需要把节点1指针域指针指向节点3，但不要忘记释放节点2所占的内存，否则将会造成内存泄漏；首先必须找到节点2的前驱节点1，假设p指向节点1。

（1）q=p->pNext;   //首先用q保存要删除节点的地址；

（2）p->pNext=q->pNext;   //q->pNext=p->pNext->pNext;   修改指针使节点1指向节点3；

（3）free(q);  //释放节点2所占的内存；








    
    
    
