#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>



//动态内存分配的函数；
//int main(void) {
//
//	//malloc函数，void *malloc( size_t size ); 动态分配空间
//	int* p = (int*)malloc(10 * sizeof(int));
//	if (p == NULL) {
//		printf("%s\n", strerror(errno));
//	}
//	else {
//		for (int i = 0; i < 10; i++)
//			*(p + i) = i;
//		for (int i = 0; i < 10; i++ )
//			printf("%d  ", *(p + i));
//	}
//	free(p);
//	p = NULL;	//将p释放完成后设置为空指针
//	printf("\n");


//	//另一种动态分配的方式: void *calloc( size_t num, size_t size );
//	//与malloc函数的区别是分配时自动初始化变量值为 0
//	int* p2 = (int*)calloc(10,sizeof(int));	//注意格式
//	if (p2 == NULL) {
//		printf("%s\n", strerror(errno));
//	}
//	else {
//		for (int i = 0; i < 10; i++)
//			*(p2 + i) = i;
//		for (int i = 0; i < 10; i++)
//			printf("%d  ", *(p2 + i));
//	}
//	free(p2);
//	p2 = NULL;
//	printf("\n");
//

//	//当你觉得分配的内存太小了，使用realloc函数增加空间
//	/*
//	void *realloc( void *memblock, size_t size );
//	如果一开始内存空间足够，在后面增加，不改变指针首地址
//	如果内存空间不足以存储你输入的空间，则创建一个新的内存块，并把原元素复制
//	尽量使用一个新的指针作为realloc的返回值
//	*/
//	int* p3 = realloc(p2, 40 * sizeof(int));
//	//realloc也可以作为malloc使用 realloc(NULL,10*sizeof(int))
//	//当p3分配失败时，为空指针
//	if (*p3 != NULL) {
//		p2 = p3;
//		for (int i = 0; i < 40; i++)
//			*(p2 + i) = i;
//		for (int i = 0; i < 40; i++)
//			printf("%d  ", *(p2 + i));
//	}
//	else
//		printf("%s\n", strerror(errno));
//
//	free(p2);
//	p2 = NULL;
//	return 0;
//}


/*
 动态内存分配的几种错误
*/


//1.  对NULL指针进行解引用操作
//int main(void) {
//	int* p = NULL;
//	*p = 20;
//
//
//	return 0;
//}



//2.  动态内存分配访问越界
//int main(void) {
//	int* p = (int*)malloc(10 * sizeof(int));
//
//	for (int i = 0; i < 15; i++)
//		*(p + i) = i;
//	for (int j = 0; j < 15; j++)
//		printf("%d  ", *(p + j));	//很危险
//	return 0;
//}



//3.  对非开辟的内存进行free释放
//int main(void) {
//	int a = 20;
//	int* n = &a;
//	free(n);	//崩溃
//
//	return 0;
//}



//4.  使用free释放开辟的动态内存的一部分
//int main(void) {
//	int* p = (int*)malloc(10 * sizeof(int));
//	for (int i = 0; i < 10; i++)
//		*p++ = i;    //指针的自增
//	for (int i = 0; i < 10; i++)
//		printf("%d  ", *p++);
//	free(p);	//崩溃，原因是指针自增到了内存的最后，意外释放了内存后的内存
//	
//	return 0;
//}



//5.  同一块内存地址多次释放
//int main(void) {
//	int* p = (int*)malloc(10 * sizeof(int));
//	for (int i = 0; i < 15; i++)
//		*(p + i) = i;
//	for (int j = 0; j < 15; j++)
//		printf("%d  ", *(p + j));	//很危险
//	free(p);
//	free(p);	// 释放两次,崩溃
//
//	return 0;
//}



//6.   最危险的； 内存泄露，忘记使用free释放
//int main(void) {
//	int* p = (int*)malloc(10 * sizeof(int));
//	for (int i = 0; i < 15; i++)
//		*(p + i) = i;
//	for (int j = 0; j < 15; j++)
//		printf("%d  ", *(p + j));	
//	//很危险
//	//***如果在一个死循环里使用malloc分配，但忘记释放，内存将无限泄露
//
//	return 0;
//}


