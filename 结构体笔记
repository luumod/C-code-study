结构体声明  模板
struct book{
	char title{max_book];
	char author[max_auth];
}
关键字 struct ，标记名 ； book 
struct book library 声明一个book结构布局的结构变量

struct book相当于int float

struct book{
	char title{max_book];
	char author[max_auth];
}library;	//声明后面加变量名，为结构体变量

struct{	//不需要结构标记
	char title{max_book];
	char author[max_auth];
}library;	

初始化结构变量，成员用逗号分隔

.运算符访问结构成员		.比&的优先级高

使用指定初始化器 :.运算符和成员名来初始化成员 最后一次赋值才是他实际的值

************************************
栈: 存放局部变量   函数形参
堆:存malloc动态内存
静态区: 存放全局变量和static静态变量
************************************

声明结构数组 :struct book lrbrary[number];
每个元素都是一个结构变量		    


嵌套结构 ：在一个结构中包含另一个结构
struct S{
...
...
}

suruct M{
	struct S  name		//要声明结构变量的名字
	..
	..
}
使用两次.运算符来访问成员


************************************
指向结构的指针：  struct book* p；	
要告诉编译器指向何处	  ：  p=&book【0】；	//指向第一个结构，	++来指向下一个结构
结构变量名不是地址，因此需要加 &取地址   数组名就是地址
结构指针+1  ==  +sizeof（struct）		

用 ->  指针访问成员
him是指向abcd结构变量的指针
等价 ；abcd.include=(*him).include=him->include 三者等价

传递结构信息的方式
************************************
	1 传递结构成员
	.运算符取结构成员作为函数形参，传递结构成员
	
	2.传递结构的地址
	利用指针指向结构体变量，函数形参:   struct S* xxx
	->运算符  使用&获取结构的地址
	
	3.传递一个结构
	a把一个结构作为形参传入函数
************************************

结构可以直接复制  

传递结构 返回结构 
传递结构本身，函数形参是peison，不带&符号，相应的形参为 struct S ，不带*号
返回结构  返回形参中的结构变量名

***************************************
指针与结构的选择：
指针  执行速度快， 但无法保护数据，可能会意外改变值  const  struct S* 可以解决问题
结构  保护数据 副本	浪费空间 时间
************************************

struct names{
	 char num[20];
}	//成员存储在结构内部，会预留空间
struct vnames{
	char* num;
}	//成员没有被分配存储空间，成员指针用于管理那些已经分配在别处的数据

使用malloc分配成员或结构内存 free释放

复合字面量和结构  用于一个临时的结构值
（struct S） {“dwdadwada”，“dwada",220};圆括号与中括号  临时的一个值 if else判断

复合字面量 C99
在函数外部，具有静态存储期
块中：自动存储期

伸缩性数组成员: C99
* 结构的最后一个成员
* 结构至少有一个成员
* 方括号是空的

匿名结构 C11

使用结构数组的函数
数组名是地址，直接传入函数形参  在函数中可以使用 .运算符来访问成员
***把数组名作为数组中第一个结构的地址传递给函数
***用数组表示法访问结构成员 &S【0】
*** const

把结构内容保存到文件

链式结构 
**** 队列  二叉树  堆  哈希表  图标 ***


联合
************************************
union  hold{
	int digit;
	double ada;
}		//联合模板与联合变量
union hold fit  	联合变量
union hold save【10】	 10个联合变量的数组
union hold * p		a指向hold类型联合变量的指针
初始化联合的三种方式: （只能存储一个值）
1.用另一个联合来初始化
2.初始化联合的某个成员
3.指定初始化器

联合指针也要用 -> 运算符

联合结构与结构体组成嵌套体系
****************************************
struct s1{
	int s;
};
struct s2{
	int a;
};
union data{
	struct s1 ylh;
	struct s2 yda;
};
struct xxx{
	char dad;
	int x;
	union data onw;
};
struct xxx flie;	//结构变量，一步一步嵌套	flie.onw.yl.s 
//匿名联合

成员运算符 ；  .
间接成员运算符 :  ->

枚举类型
************************************
声明符号名称来表示整形常量
enum关键字
enum xxx {aaa,bbb,ccc,ddd,eee};
enum xxx qqq;	//枚举变量
0 1 2 3 4 5 6
switch语句 

typedef 类型 取一个新名字
typedef char BYTE;	
BYTE a;			//新的名字 char



	
	

























